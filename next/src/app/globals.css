@import "tailwindcss";

@plugin "daisyui";
@plugin "@tailwindcss/typography";

/* バリアントを作成 */
@custom-variant dark (&:where([data-theme="dark"], [data-theme="dark"] *));

/* https://tailwindcss.com/docs/theme#theme-variable-namespaces */
@theme {
    --color-iceberg-dark: #161821;
    --color-iceberg-dark-code: #181828; /* コードブロック用 */
    --color-iceberg-light: #fefeff;
    --color-iceberg-light-code: #f3f6ff; /* コードブロック用 */
    --breakpoint-3xl: 1800px;
    --breakpoint-4xl: 2460px;
}

body {
    font-family: Arial, Helvetica, sans-serif;
}

/* typographyプラグインのスタイルをリセット */
.prose {
    max-width: none;
    /* h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    a {
        color: inherit;
    } */
    img {
        margin-top: unset;
        margin-bottom: unset;
        max-width: 40rem;
    }
}

/*

tailwind v4からは、css側で設定を行う
tailwind.config.tsは不要になった

@custom-variant について
Tailwind v4のディレクティブであり、独自のCSSバリアント（修飾子）を定義する
ここでは dark という名前のバリアントを作成しており、これにより dark:bg-black のようなクラスが利用可能になる

適用されるテーマの切り替え自体はThemeToggleButtonで行う
ThemeToggleButton押下でnext-themesのsetThemeを実行、
それによりhtmlタグのdata-theme属性が更新され、
属性の更新によってdaisyuiのスタイルが適用される、
という流れ

適用するテーマ自体は、（このファイル内に記述がある通り）daisyui側の設定で事前に指定する必要がある
themes: nord, dark; のように個別で指定するか、
themes: all; のように一括で指定するかの2択

モードの指定方法に（デフォルトのclassではなく）data-theme属性を使用するための設定は、
以下の様にNextThemeProvider側のpropsで指定する
attribute="data-theme"

tailwind.conifg.tsを継続して利用するための回避策はある
@config '../../tailwind.config.ts';

*/
